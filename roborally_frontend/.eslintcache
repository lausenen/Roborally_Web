[{"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\index.tsx":"1","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\App.tsx":"3","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\BoardComponent.tsx":"4","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\GamesComponent.tsx":"5","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\context\\GameContextProvider.tsx":"6","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\context\\GameContext.ts":"7","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\api\\GameApi.ts":"8","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\SpaceComponent.tsx":"9","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\GameComponent.tsx":"10"},{"size":533,"mtime":1623241147396,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1623234740241,"results":"13","hashOfConfig":"12"},{"size":654,"mtime":1623241278050,"results":"14","hashOfConfig":"12"},{"size":2297,"mtime":1623234740232,"results":"15","hashOfConfig":"12"},{"size":757,"mtime":1623238953102,"results":"16","hashOfConfig":"12"},{"size":6624,"mtime":1623234740239,"results":"17","hashOfConfig":"12"},{"size":1079,"mtime":1623234740238,"results":"18","hashOfConfig":"12"},{"size":899,"mtime":1623234740230,"results":"19","hashOfConfig":"12"},{"size":2359,"mtime":1623234740236,"results":"20","hashOfConfig":"12"},{"size":710,"mtime":1623234740233,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cgu9dc",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\index.tsx",[],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\reportWebVitals.ts",[],["44","45"],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\App.tsx",[],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\BoardComponent.tsx",[],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\GamesComponent.tsx",[],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\context\\GameContextProvider.tsx",["46"],"import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\r\nimport GameContext from \"./GameContext\"\r\nimport {Player} from \"../types/Player\";\r\nimport {Board} from \"../types/Board\";\r\nimport {Space} from \"../types/Space\";\r\nimport GameApi from \"../api/GameApi\";\r\nimport {Game} from \"../types/Game\";\r\n\r\ntype GameContextProviderPropsType = {\r\n    children: ReactNode\r\n}\r\n\r\n\r\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        GameApi.getBoard(1).then(board => {\r\n            setSpaces(board.spaceDtos)\r\n            setPlayers(board.playerDtos)\r\n            setWidth(board.width)\r\n            setHeight(board.height)\r\n            setGameId(board.boardId)\r\n            setGameName(board.boardName)\r\n            if (board.currentPlayerDto) {\r\n                setCurrentPlayer(board.currentPlayerDto)\r\n                board.playerDtos.forEach((player,index)=>{\r\n                    if(player.playerId === board.currentPlayerDto?.playerId){\r\n                        setCurrentPlayerIndex(index)\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            setLoaded(true)\r\n        }).catch(() => {\r\n            console.error(\"Error while fetching board from backend\")\r\n        })\r\n    }, [])\r\n    //The code below is executed when the provider is rendered (inside App.tsx)\r\n    //The code should fetch the data from the API instead of using a static assignment\r\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\r\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\r\n    // we also declare that the state variable and setter should be of type /take type Player[]\r\n    const [players, setPlayers] = useState<Player[]>([])\r\n    const [games, setGames] = useState<Game[]>([])\r\n    const playerCount = useMemo(() => players.length, [players])\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\r\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\"})\r\n    const [spaces, setSpaces] = useState<Space[][]>([])\r\n    const [width, setWidth] = useState<number>(0)\r\n    const [height, setHeight] = useState<number>(0)\r\n    const [gameId, setGameId] = useState<number>(0)\r\n    const [gameName, setGameName] = useState<string>(\"hi\")\r\n\r\n    //Define a function used to set a player ona  specific space\r\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\r\n        //Check if space already has a player standing on it\r\n        if (!space.playerId) {\r\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\r\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\r\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\r\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\r\n\r\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\r\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\r\n                }\r\n                setSpaces(tempSpaces)\r\n                let tempPlayers = [...players]\r\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\r\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\r\n                setPlayers(tempPlayers)\r\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\r\n\r\n            }).catch(() => {\r\n                console.error(\"Error while moving player\")\r\n            })\r\n\r\n        }\r\n\r\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\r\n\r\n    const switchToNextPlayer = useCallback(async () => {\r\n        await GameApi.switchPlayer(gameId).then(()=>{\r\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\r\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\r\n            setCurrentPlayer(players[newPlayerIndex])\r\n            setCurrentPlayerIndex(newPlayerIndex)\r\n        }).catch(()=>console.error(\"Error while switching player\"))\r\n        \r\n    }, [currentPlayerIndex, gameId, playerCount, players])\r\n\r\n    const selectGame = useCallback(async (game:Game) => {\r\n        GameApi.getBoard(game.gameId).then(board=> {\r\n            setSpaces(board.spaceDtos)\r\n            setPlayers(board.playerDtos)\r\n            setWidth(board.width)\r\n            setHeight(board.height)\r\n            setGameId(board.boardId)\r\n            setGameName(board.boardName)\r\n            if(board.currentPlayerDto){\r\n                setCurrentPlayer(board.currentPlayerDto)\r\n                board.playerDtos.forEach((player,index)=>{\r\n                    if(player.playerId === board.currentPlayerDto?.playerId){\r\n                        setCurrentPlayerIndex(index)\r\n                    }\r\n                })\r\n            }\r\n            setLoaded(true)\r\n        }).catch(()=> {\r\n            console.error(\"Error while fetching board from backend\")\r\n        })\r\n    }, [])\r\n\r\n    const unselectGame = useCallback(async () => {\r\n        setLoaded(false)\r\n    }, [])\r\n\r\n    const board = useMemo<Board>(() => {\r\n        return ({\r\n            spaceDtos: spaces,\r\n            playerDtos: players,\r\n            currentPlayerDto: currentPlayer,\r\n            currentPlayerIndex: currentPlayerIndex,\r\n            width: width,\r\n            height: height,\r\n            boardName: gameName,\r\n            boardId: gameId\r\n        })\r\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\r\n\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value={\r\n                {\r\n                    games: games,\r\n                    selectGame: selectGame,\r\n                    unselectGame: unselectGame,\r\n                    loaded: loaded,\r\n                    board: board,\r\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\r\n                    switchCurrentPlayer: switchToNextPlayer\r\n                }\r\n            }>\r\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\r\n        </GameContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GameContextProvider","C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\context\\GameContext.ts",[],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\api\\GameApi.ts",[],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\SpaceComponent.tsx",[],"C:\\Users\\lauth\\Universitet\\1.Semester\\62532 Versionsstyring og testmetoder\\Java\\Roborally_Web\\roborally_frontend\\src\\components\\GameComponent.tsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":45,"column":19,"nodeType":"53","messageId":"54","endLine":45,"endColumn":27},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"@typescript-eslint/no-unused-vars","'setGames' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]