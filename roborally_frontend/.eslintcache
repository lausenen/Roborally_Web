[{"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\index.tsx":"1","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\App.tsx":"3","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\BoardComponent.tsx":"4","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GamesComponent.tsx":"5","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContextProvider.tsx":"6","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContext.ts":"7","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\SpaceComponent.tsx":"8","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\api\\GameApi.ts":"9","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GameComponent.tsx":"10"},{"size":514,"mtime":1612698770000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1612698770000,"results":"13","hashOfConfig":"12"},{"size":654,"mtime":1624006548572,"results":"14","hashOfConfig":"12"},{"size":2643,"mtime":1624010108082,"results":"15","hashOfConfig":"12"},{"size":3425,"mtime":1624347870135,"results":"16","hashOfConfig":"12"},{"size":8628,"mtime":1624384062994,"results":"17","hashOfConfig":"12"},{"size":2022,"mtime":1624384045842,"results":"18","hashOfConfig":"12"},{"size":2389,"mtime":1624382741411,"results":"19","hashOfConfig":"12"},{"size":2871,"mtime":1624380371635,"results":"20","hashOfConfig":"12"},{"size":2364,"mtime":1624378813092,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1x2v2gs",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\index.tsx",[],["46","47"],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\App.tsx",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\BoardComponent.tsx",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GamesComponent.tsx",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContextProvider.tsx",["48","49","50"],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContext.ts",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\SpaceComponent.tsx",["51"],"import {FunctionComponent, useCallback, useContext, useMemo} from \"react\";\nimport {Space} from \"../types/Space\";\nimport GameContext from \"../context/GameContext\";\nimport styles from \"../styling/SpaceComponent.module.scss\"\n\nexport type SpaceComponentProps = {\n    space: Space\n}\n/*\n Note that we are explicitly specifying that SpaceComponent is of the type FunctionComponent,\n and that the props are of type SpaceComponentProps, also note that we use object destructuring to \"unpack\" the props.\n */\n\nexport const SpaceComponent: FunctionComponent<SpaceComponentProps> = ({space}) => {\n    const {board, setCurrentPlayerOnSpace, switchCurrentPlayer, currentUser, currentPlayer} = useContext(GameContext)\n    //Below we essentially define a new variable using the useMemo hook, which can only take the value \"white\" or \"black\"\n    //Additionally the code inside the hook (the calculation of whether it is black or white) is only executed\n    // when the space prop updates (this is known as the dependencies of the hook)\n    const color = useMemo<\"white\" | \"black\">(() => {\n        if ((space.x + space.y) % 2 === 0) {\n            return \"white\"\n        } else {\n            return \"black\"\n        }\n    }, [space])\n    //We define a function using the useCallback hook, it returns a memoized callback/function that is only\n    // updated when the dependencies update.\n    const onClickField = useCallback(async () => {\n        if (!space.playerId && currentUser.userId===currentPlayer.userId) { // A shorthand, check equivalents at https://bit.ly/2MnA4Rk\n            await setCurrentPlayerOnSpace(space)\n            switchCurrentPlayer()\n        }\n    }, [setCurrentPlayerOnSpace, space, switchCurrentPlayer])\n    const playerColor =\n        useMemo(() => {\n        const res = board.playerDtos.find(value => value.playerId === space.playerId)\n        if (res) return res.playerColor\n    }, [board.playerDtos, space.playerId])\n    return (\n        //The classname is set dynamically and can either take the value styles.whiteSpace or styles.blackSpace\n        //We also define that the callback should be called when the div is clicked\n        <div className={styles[color + \"Space\"]} onClick={onClickField}>\n            {/*if space.player is set render the div*/}\n            {(space.playerId && playerColor) && <div className={styles[playerColor + \"Player\"]}/>}\n        </div>\n    )\n\n\n}\n\n\n","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\api\\GameApi.ts",["52"],"import axios from \"axios\";\r\nimport {Board} from \"../types/Board\";\r\nimport {Space} from \"../types/Space\";\r\nimport {Game} from \"../types/Game\";\r\nimport {Player} from \"../types/Player\";\r\nimport {User} from \"../types/User\";\r\n\r\nclass GameApi{\r\n    private static instance : GameApi;\r\n    private readonly BACKEND_URL = \"http://localhost:8080\"\r\n    private constructor() {}\r\n\r\n    public static getInstance():GameApi{\r\n        if(!GameApi.instance){\r\n            GameApi.instance = new GameApi();\r\n        }\r\n        return GameApi.instance;\r\n    }\r\n    public createUser(name: string){\r\n        const User = {\r\n            name : name\r\n        }\r\n        return axios.post(`${this.BACKEND_URL}/user`, User).then(\r\n            value => value.data\r\n        )\r\n    }\r\n\r\n    public joinAsUser(gameId:number, user:User){\r\n        return axios.put<Game>(`${this.BACKEND_URL}/game/${gameId}`,user).then(\r\n            value => value.data\r\n        )\r\n    }\r\n\r\n    public validateUser(name: string){\r\n        return axios.get<User>(`${this.BACKEND_URL}/user`, {params:{name: name}}).then(\r\n            value => value.data\r\n\r\n        )\r\n\r\n    }\r\n\r\n    public getGames() {\r\n        return axios.get<Game[]>(`${this.BACKEND_URL}/game`).then(value =>value.data)\r\n    }\r\n\r\n    public createGame(nameOfGame:string, width:number, height:number, playerCount:number) {\r\n\r\n        const game = {//game object\r\n            name: nameOfGame,\r\n            numberOfUsers: playerCount,\r\n            started: true,\r\n            users: []\r\n        }\r\n\r\n        this.createBoard(nameOfGame,width, height);\r\n        return axios.post<number>(`${this.BACKEND_URL}/game/`, game).then(value =>value.data)\r\n    }\r\n\r\n    public createBoard(nameOfGame:string,width:number, height:number){\r\n        const board = {//game object\r\n            boardId : -1,\r\n            boardName : nameOfGame,\r\n            height : height,\r\n            width : width,\r\n        }\r\n        return axios.post<number>(`${this.BACKEND_URL}/board/`,board).then(value =>value.data)\r\n    }\r\n\r\n    public getBoard(boardId : number){\r\n        return axios.get<Board>(`${this.BACKEND_URL}/board/${boardId}`).then(value =>value.data)\r\n    }\r\n\r\n    public moveCurrentPlayer(boardId : number, space : Space){\r\n        return axios.put(`${this.BACKEND_URL}/board/${boardId}/move`,space)\r\n    }\r\n\r\n    public switchPlayer(boardId : number){\r\n        return axios.put(`${this.BACKEND_URL}/board/${boardId}/switchplayer`)\r\n    }\r\n    public addPlayer(playerName:string,playerColor:string,boardId:number,user:User){\r\n        debugger;\r\n        const playerDto = {\r\n            playerName: playerName,\r\n            playerColor: playerColor,\r\n            boardId: boardId,\r\n            userId: user.userId\r\n        }\r\n        return axios.post(`${this.BACKEND_URL}/board/${boardId}/player`, playerDto)\r\n    }\r\n}\r\n\r\nexport default GameApi.getInstance()","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GameComponent.tsx",["53"],"import {Game} from \"../types/Game\";\r\nimport {FunctionComponent, useCallback, useContext, useState} from \"react\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport \"../styling/GameComponent.module.scss\"\r\n\r\n\r\nexport type GameComponentProps = {\r\n    game : Game\r\n}\r\n\r\nexport const GameComponent: FunctionComponent<GameComponentProps> = ({game}) => {\r\n    const {selectGame, currentUser, joinAsUser, addPlayer} = useContext(GameContext)\r\n    const [playerChoosen, setPlayerChoosen] = useState<boolean>(false)\r\n    const [playerName, setPlayerName] = useState<string>(\"Player 1\")\r\n    const [playerColor, setPlayerColor] = useState<string>(\"Red\")\r\n\r\n    const onClickGame = async () => {\r\n        await selectGame(game)\r\n    }\r\n    const onJoinGame = async () => {\r\n        await joinAsUser(game)\r\n    }\r\n    const onClickAddPlayer = async () => {\r\n        addPlayer(playerName,playerColor,game.gameId,currentUser)\r\n        setPlayerName(\"\")\r\n        setPlayerColor(\"\")\r\n        setPlayerChoosen(true)\r\n\r\n    }\r\n\r\n    return(\r\n\r\n        <div className=\"h1\">\r\n             <h1>{game.gameId}: {game.name}</h1>\r\n            <p>Joined Players ({game.users.length}/{game.numberOfUsers})</p>\r\n            <ul>\r\n                {game.users.map((user, index) => <li>\r\n                    User {user.name}\r\n                    {user.name===currentUser.name&&playerChoosen===false?(<div>\r\n                        <p>Choose your layout</p>\r\n                        <label>Name Of Player: &nbsp;\r\n                            <input type=\"text\" value={playerName}  onChange={event => setPlayerName(event.target.value)}/>\r\n                        </label>\r\n                        <br/>\r\n                        <label>Player Color: &nbsp;\r\n                        <input type=\"text\" value={playerColor}  onChange={event => setPlayerColor(event.target.value)}/>\r\n                        </label>\r\n                        <br/>\r\n                        <button onClick={onClickAddPlayer}>Add Player To Game!</button>\r\n                        </div>):<div/>}\r\n                </li>)}\r\n            </ul>\r\n            <p>Max amount of players: {game.numberOfUsers}</p>\r\n                <button onClick={onJoinGame} className=\"button button1\">Join Game</button>\r\n                <button onClick={onClickGame} className=\"button button1\">Start Game</button>\r\n\r\n    </div>\r\n    )\r\n}",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":8,"column":9,"nodeType":"60","messageId":"61","endLine":8,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":25,"column":7,"nodeType":"64","endLine":25,"endColumn":23,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":169,"column":30,"nodeType":"68","messageId":"69","endLine":169,"endColumn":32},{"ruleId":"62","severity":1,"message":"70","line":33,"column":8,"nodeType":"64","endLine":33,"endColumn":61,"suggestions":"71"},{"ruleId":"58","severity":1,"message":"72","line":5,"column":9,"nodeType":"60","messageId":"61","endLine":5,"endColumn":15},{"ruleId":"58","severity":1,"message":"73","line":2,"column":28,"nodeType":"60","messageId":"61","endLine":2,"endColumn":39},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'Console' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","ArrayExpression",["76"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useCallback has missing dependencies: 'currentPlayer.userId' and 'currentUser.userId'. Either include them or remove the dependency array.",["77"],"'Player' is defined but never used.","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [loaded, gameId, load]",{"range":"82","text":"83"},"Update the dependencies array to be: [currentPlayer.userId, currentUser.userId, setCurrentPlayerOnSpace, space, switchCurrentPlayer]",{"range":"84","text":"85"},[899,915],"[loaded, gameId, load]",[1653,1706],"[currentPlayer.userId, currentUser.userId, setCurrentPlayerOnSpace, space, switchCurrentPlayer]"]