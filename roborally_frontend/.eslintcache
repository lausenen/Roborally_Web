[{"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\index.tsx":"1","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\App.tsx":"3","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\BoardComponent.tsx":"4","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GamesComponent.tsx":"5","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContextProvider.tsx":"6","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContext.ts":"7","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\SpaceComponent.tsx":"8","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\api\\GameApi.ts":"9","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GameComponent.tsx":"10"},{"size":514,"mtime":1612698770000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1612698770000,"results":"13","hashOfConfig":"12"},{"size":654,"mtime":1624006548572,"results":"14","hashOfConfig":"12"},{"size":2643,"mtime":1624010108082,"results":"15","hashOfConfig":"12"},{"size":3425,"mtime":1624347870135,"results":"16","hashOfConfig":"12"},{"size":8621,"mtime":1624354184755,"results":"17","hashOfConfig":"12"},{"size":1563,"mtime":1624351704934,"results":"18","hashOfConfig":"12"},{"size":2309,"mtime":1612698770000,"results":"19","hashOfConfig":"12"},{"size":2871,"mtime":1624355546888,"results":"20","hashOfConfig":"12"},{"size":2383,"mtime":1624354858429,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1x2v2gs",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\index.tsx",[],["45","46"],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\App.tsx",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\BoardComponent.tsx",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GamesComponent.tsx",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContextProvider.tsx",["47","48","49"],"import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\r\nimport GameContext from \"./GameContext\"\r\nimport {Player} from \"../types/Player\";\r\nimport {Board} from \"../types/Board\";\r\nimport {Space} from \"../types/Space\";\r\nimport GameApi from \"../api/GameApi\";\r\nimport {Game} from \"../types/Game\";\r\nimport {Console} from \"inspector\";\r\nimport {setInterval} from \"timers\";\r\nimport {User} from \"../types/User\";\r\n\r\ntype GameContextProviderPropsType = {\r\n    children: ReactNode\r\n}\r\n\r\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n    const [gamesLoaded, setGamesLoaded] = useState<boolean>(false)\r\n    const [gameId, setGameId] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(load, 5000)\r\n        load()\r\n        return () => clearInterval(interval)\r\n    },[loaded, gameId])\r\n\r\n    //The code below is executed when the provider is rendered (inside App.tsx)\r\n    //The code should fetch the data from the API instead of using a static assignment\r\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\r\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\r\n    // we also declare that the state variable and setter should be of type /take type Player[]\r\n    const [players, setPlayers] = useState<Player[]>([])\r\n    const [games, setGames] = useState<Game[]>([])\r\n    const playerCount = useMemo(() => players.length, [players])\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\r\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\", userId:-1})\r\n    const [currentUser, setCurrentUser] = useState<User>({userId : -1,name:\"Test\",displayName: \"\"})\r\n    const [spaces, setSpaces] = useState<Space[][]>([])\r\n    const [width, setWidth] = useState<number>(0)\r\n    const [height, setHeight] = useState<number>(0)\r\n    const [gameName, setGameName] = useState<string>(\"hi\")\r\n\r\n\r\n\r\n    const load = async () => {\r\n        if (loaded && gameId >= 0) {\r\n            GameApi.getBoard(gameId).then(board => {\r\n                if (gameId === board.boardId) {\r\n\r\n                    setSpaces(board.spaceDtos)\r\n                    setPlayers(board.playerDtos)\r\n                    setWidth(board.width)\r\n                    setHeight(board.height)\r\n                    setGameId(board.boardId)\r\n                    setGameName(board.boardName)\r\n                    if (board.currentPlayerDto) {\r\n                        setCurrentPlayer(board.currentPlayerDto)\r\n                        board.playerDtos.forEach((player, index) => {\r\n                            if (player.playerId === board.currentPlayerDto?.playerId) {\r\n                                setCurrentPlayerIndex(index)\r\n                            }\r\n                        })\r\n                    } else {\r\n                        console.error(\"Game doens't match board\")\r\n                    }\r\n\r\n                }\r\n            }).catch(() => {\r\n                console.error(\"Error while fetching board from backend\")\r\n            })\r\n        } else {\r\n            GameApi.getGames().then(games => {\r\n                setGames(games)\r\n                setGamesLoaded(true)\r\n            }).catch(() => {\r\n                console.error(\"Games could not be loaded\")\r\n            })\r\n        }\r\n    }\r\n\r\n    //Define a function used to set a player ona  specific space\r\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\r\n        //Check if space already has a player standing on it\r\n        if (!space.playerId) {\r\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\r\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\r\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\r\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\r\n\r\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\r\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\r\n                }\r\n                setSpaces(tempSpaces)\r\n                let tempPlayers = [...players]\r\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\r\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\r\n                setPlayers(tempPlayers)\r\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\r\n\r\n            }).catch(() => {\r\n                console.error(\"Error while moving player\")\r\n            })\r\n\r\n        }\r\n\r\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\r\n\r\n    const switchToNextPlayer = useCallback(async () => {\r\n        await GameApi.switchPlayer(gameId).then(()=>{\r\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\r\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\r\n            setCurrentPlayer(players[newPlayerIndex])\r\n            setCurrentPlayerIndex(newPlayerIndex)\r\n        }).catch(()=>console.error(\"Error while switching player\"))\r\n        \r\n    }, [currentPlayerIndex, gameId, playerCount, players])\r\n\r\n    const selectGame = useCallback(async (game:Game) => {\r\n        GameApi.getBoard(game.gameId).then(board=> {\r\n            setSpaces(board.spaceDtos)\r\n            setPlayers(board.playerDtos)\r\n            setWidth(board.width)\r\n            setHeight(board.height)\r\n            setGameId(board.boardId)\r\n            setGameName(board.boardName)\r\n            if(board.currentPlayerDto){\r\n                setCurrentPlayer(board.currentPlayerDto)\r\n                board.playerDtos.forEach((player,index)=>{\r\n                    if(player.playerId === board.currentPlayerDto?.playerId){\r\n                        setCurrentPlayerIndex(index)\r\n                    }\r\n                })\r\n            }\r\n            setLoaded(true)\r\n        }).catch(()=> {\r\n            console.error(\"Error while fetching board from backend\")\r\n        })\r\n    }, [])\r\n\r\n    const unselectGame = useCallback(async () => {\r\n        setLoaded(false)\r\n    }, [])\r\n\r\n\r\n    const board = useMemo<Board>(() => {\r\n        return ({\r\n            spaceDtos: spaces,\r\n            playerDtos: players,\r\n            currentPlayerDto: currentPlayer,\r\n            currentPlayerIndex: currentPlayerIndex,\r\n            width: width,\r\n            height: height,\r\n            boardName: gameName,\r\n            boardId: gameId\r\n        })\r\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\r\n\r\n    const ValidateUser = async (name:string) => {\r\n        const response = await GameApi.validateUser(name)\r\n        setCurrentUser(response)\r\n\r\n    }\r\n    const joinAsUser = async (game:Game) =>{\r\n        let sameName = false\r\n        game.users.forEach(function (user) {\r\n            if(user.name === currentUser.name){\r\n                sameName = true\r\n            }\r\n        })\r\n        if(game.users.length != game.numberOfUsers && sameName === false){\r\n        await GameApi.joinAsUser(game.gameId,currentUser)\r\n        setGames(games)\r\n        }\r\n    }\r\n\r\n    const  addPlayer = (playerName:string,playerColor:string,boardId:number,user:User) => {GameApi.addPlayer(playerName,playerColor,boardId,user)}\r\n\r\n\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value={\r\n                {\r\n                    games: games,\r\n                    selectGame: selectGame,\r\n                    unselectGame: unselectGame,\r\n                    load: load,\r\n                    validateUser: ValidateUser,\r\n                    joinAsUser: joinAsUser,\r\n                    currentUser: currentUser,\r\n                    addPlayer: addPlayer,\r\n                    gamesLoaded,\r\n                    loaded: loaded,\r\n                    board: board,\r\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\r\n                    switchCurrentPlayer: switchToNextPlayer\r\n                }\r\n            }>\r\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\r\n        </GameContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GameContextProvider","C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\context\\GameContext.ts",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\SpaceComponent.tsx",[],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\api\\GameApi.ts",["50"],"C:\\Users\\lau\\Documents\\DTU Undervisning\\02324 Advanced Programming Spring 21\\Roborally web\\roborally_frontend\\src\\components\\GameComponent.tsx",["51"],"import {Game} from \"../types/Game\";\r\nimport {FunctionComponent, useCallback, useContext, useState} from \"react\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport \"../styling/GameComponent.module.scss\"\r\n\r\n\r\nexport type GameComponentProps = {\r\n    game : Game\r\n}\r\n\r\nexport const GameComponent: FunctionComponent<GameComponentProps> = ({game}) => {\r\n    const {selectGame, currentUser, joinAsUser, addPlayer} = useContext(GameContext)\r\n    const [playerChoosen, setPlayerChoosen] = useState<boolean>(false)\r\n    const [playerName, setPlayerName] = useState<string>(\"Player 1\")\r\n    const [playerColor, setPlayerColor] = useState<string>(\"Red\")\r\n\r\n    const onClickGame = async () => {\r\n        debugger;\r\n        await selectGame(game)\r\n    }\r\n    const onJoinGame = async () => {\r\n        await joinAsUser(game)\r\n    }\r\n    const onClickAddPlayer = async () => {\r\n        addPlayer(playerName,playerColor,game.gameId,currentUser)\r\n        setPlayerName(\"\")\r\n        setPlayerColor(\"\")\r\n        setPlayerChoosen(true)\r\n\r\n    }\r\n\r\n    return(\r\n\r\n        <div className=\"h1\">\r\n             <h1>{game.gameId}: {game.name}</h1>\r\n            <p>Joined Players ({game.users.length}/{game.numberOfUsers})</p>\r\n            <ul>\r\n                {game.users.map((user, index) => <li>\r\n                    User {user.name}\r\n                    {user.name===currentUser.name&&playerChoosen===false?(<div>\r\n                        <p>Choose your layout</p>\r\n                        <label>Name Of Player: &nbsp;\r\n                            <input type=\"text\" value={playerName}  onChange={event => setPlayerName(event.target.value)}/>\r\n                        </label>\r\n                        <br/>\r\n                        <label>Player Color: &nbsp;\r\n                        <input type=\"text\" value={playerColor}  onChange={event => setPlayerColor(event.target.value)}/>\r\n                        </label>\r\n                        <br/>\r\n                        <button onClick={onClickAddPlayer}>Add Player To Game!</button>\r\n                        </div>):<div/>}\r\n                </li>)}\r\n            </ul>\r\n            <p>Max amount of players: {game.numberOfUsers}</p>\r\n                <button onClick={onJoinGame} className=\"button button1\">Join Game</button>\r\n                <button onClick={onClickGame} className=\"button button1\">Start Game</button>\r\n\r\n    </div>\r\n    )\r\n}",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":8,"column":9,"nodeType":"58","messageId":"59","endLine":8,"endColumn":16},{"ruleId":"60","severity":1,"message":"61","line":25,"column":7,"nodeType":"62","endLine":25,"endColumn":23,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":170,"column":30,"nodeType":"66","messageId":"67","endLine":170,"endColumn":32},{"ruleId":"56","severity":1,"message":"68","line":5,"column":9,"nodeType":"58","messageId":"59","endLine":5,"endColumn":15},{"ruleId":"56","severity":1,"message":"69","line":2,"column":28,"nodeType":"58","messageId":"59","endLine":2,"endColumn":39},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'Console' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","ArrayExpression",["72"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Player' is defined but never used.","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [loaded, gameId, load]",{"range":"75","text":"76"},[899,915],"[loaded, gameId, load]"]