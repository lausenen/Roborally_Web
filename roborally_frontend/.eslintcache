[{"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/index.tsx":"1","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/reportWebVitals.ts":"2","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/App.tsx":"3","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/BoardComponent.tsx":"4","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/GamesComponent.tsx":"5","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/context/GameContextProvider.tsx":"6","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/context/GameContext.ts":"7","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/SpaceComponent.tsx":"8","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/GameComponent.tsx":"9","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/api/GameApi.ts":"10"},{"size":514,"mtime":1623240503330,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1623240503330,"results":"13","hashOfConfig":"12"},{"size":633,"mtime":1623240503328,"results":"14","hashOfConfig":"12"},{"size":2241,"mtime":1623240503328,"results":"15","hashOfConfig":"12"},{"size":556,"mtime":1623240503329,"results":"16","hashOfConfig":"12"},{"size":6600,"mtime":1623248745045,"results":"17","hashOfConfig":"12"},{"size":1039,"mtime":1623240503329,"results":"18","hashOfConfig":"12"},{"size":2309,"mtime":1623240503329,"results":"19","hashOfConfig":"12"},{"size":685,"mtime":1623240503328,"results":"20","hashOfConfig":"12"},{"size":870,"mtime":1623240503328,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"82i5ln",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/index.tsx",[],["44","45"],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/reportWebVitals.ts",[],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/App.tsx",[],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/BoardComponent.tsx",[],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/GamesComponent.tsx",[],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/context/GameContextProvider.tsx",["46"],"import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\nimport GameContext from \"./GameContext\"\nimport {Player} from \"../types/Player\";\nimport {Board} from \"../types/Board\";\nimport {Space} from \"../types/Space\";\nimport GameApi from \"../api/GameApi\";\nimport {Game} from \"../types/Game\";\n\ntype GameContextProviderPropsType = {\n    children: ReactNode\n}\n\n\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\n    const [loaded, setLoaded] = useState<boolean>(false)\n    useEffect(() => {\n        GameApi.getBoard(1).then(board => {\n            if(board.playerDtos.length > 0) {\n                setSpaces(board.spaceDtos)\n                setPlayers(board.playerDtos)\n                setWidth(board.width)\n                setHeight(board.height)\n                setGameId(board.boardId)\n                setGameName(board.boardName)\n                if (board.currentPlayerDto) {\n                    setCurrentPlayer(board.currentPlayerDto)\n                    board.playerDtos.forEach((player, index) => {\n                        if (player.playerId === board.currentPlayerDto?.playerId) {\n                            setCurrentPlayerIndex(index)\n                        }\n                    })\n\n                }\n\n                setLoaded(true)\n            }\n        }).catch(() => {\n            console.error(\"Error while fetching board from backend\")\n        })\n    }, [])\n    //The code below is executed when the provider is rendered (inside App.tsx)\n    //The code should fetch the data from the API instead of using a static assignment\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\n    // we also declare that the state variable and setter should be of type /take type Player[]\n    const [players, setPlayers] = useState<Player[]>([])\n    const [games, setGames] = useState<Game[]>([])\n    const playerCount = useMemo(() => players.length, [players])\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\"})\n    const [spaces, setSpaces] = useState<Space[][]>([])\n    const [width, setWidth] = useState<number>(0)\n    const [height, setHeight] = useState<number>(0)\n    const [gameId, setGameId] = useState<number>(0)\n    const [gameName, setGameName] = useState<string>(\"hi\")\n\n    //Define a function used to set a player ona  specific space\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\n        //Check if space already has a player standing on it\n        if (!space.playerId) {\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\n\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n                }\n                setSpaces(tempSpaces)\n                let tempPlayers = [...players]\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\n                setPlayers(tempPlayers)\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\n\n            }).catch(() => {\n                console.error(\"Error while moving player\")\n            })\n\n        }\n\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n    const switchToNextPlayer = useCallback(async () => {\n        await GameApi.switchPlayer(gameId).then(()=>{\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\n            setCurrentPlayer(players[newPlayerIndex])\n            setCurrentPlayerIndex(newPlayerIndex)\n        }).catch(()=>console.error(\"Error while switching player\"))\n        \n    }, [currentPlayerIndex, gameId, playerCount, players])\n\n    const selectGame = useCallback(async (game:Game) => {\n        GameApi.getBoard(game.gameId).then(board=> {\n            setSpaces(board.spaceDtos)\n            setPlayers(board.playerDtos)\n            setWidth(board.width)\n            setHeight(board.height)\n            setGameId(board.boardId)\n            setGameName(board.boardName)\n            if(board.currentPlayerDto){\n                setCurrentPlayer(board.currentPlayerDto)\n                board.playerDtos.forEach((player,index)=>{\n                    if(player.playerId === board.currentPlayerDto?.playerId){\n                        setCurrentPlayerIndex(index)\n                    }\n                })\n            }\n            setLoaded(true)\n        }).catch(()=> {\n            console.error(\"Error while fetching board from backend\")\n        })\n    }, [])\n\n    const unselectGame = useCallback(async () => {\n        setLoaded(false)\n    }, [])\n\n    const board = useMemo<Board>(() => {\n        return ({\n            spaceDtos: spaces,\n            playerDtos: players,\n            currentPlayerDto: currentPlayer,\n            currentPlayerIndex: currentPlayerIndex,\n            width: width,\n            height: height,\n            boardName: gameName,\n            boardId: gameId\n        })\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\n\n\n    return (\n        <GameContext.Provider\n            value={\n                {\n                    games: games,\n                    selectGame: selectGame,\n                    unselectGame: unselectGame,\n                    loaded: loaded,\n                    board: board,\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\n                    switchCurrentPlayer: switchToNextPlayer\n                }\n            }>\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\n        </GameContext.Provider>\n    )\n}\n\nexport default GameContextProvider","/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/context/GameContext.ts",[],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/SpaceComponent.tsx",[],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/components/GameComponent.tsx",[],"/Users/stevenpedersen/IdeaProjects/Roborally_Web/roborally_frontend/src/api/GameApi.ts",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":47,"column":19,"nodeType":"53","messageId":"54","endLine":47,"endColumn":27},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"@typescript-eslint/no-unused-vars","'setGames' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]